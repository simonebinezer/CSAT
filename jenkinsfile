pipeline {
    agent any

    environment {
        SONARQUBE_SCANNER_HOME = tool name: 'SonarScanner' // Replace 'SonarScanner' with your configured scanner name
        SONAR_PROJECT_KEY = 'CSAT'
        GITHUB_REPO = 'https://github.com/simonebinezer/CSAT'
        SONAR_HOST_URL = 'http://localhost:9099' // Replace with your SonarQube server address
        SONAR_TOKEN = credentials('sonar-token') // Store your SonarQube token in Jenkins credentials
    }
     
     stages {
        stage('Clone Repository') {
            steps {
                git branch: 'main', url: 'https://github.com/simonebinezer/CSAT.git'  // Replace with your GitHub repo and branch
            }
        }

        stage('Setup PHP Environment') {
            steps {
                script {
                    if (isUnix()) {
                        sh 'php --version || sudo apt-get install php -y'
                    } else {
                        bat 'php --version || echo "Please install PHP on your Windows machine and add it to PATH"'
                    }
                }
            }
        }

            stage("Build & SonarQube Analysis") {
            steps {
            withSonarQubeEnv('SonarQube') {
                    withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_TOKEN')]) {
                        bat 'sonar-scanner -Dsonar.login=%SONAR_TOKEN%'
                    }
                }
            }
        }

        stage("Quality Gate") {
            steps {
                timeout(time: 1, unit: 'MINUTES') {
                    script {
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            error "Pipeline failed due to quality gate failure: ${qg.status}"
                        }
                    }
                }
            }
        }
    }
}
